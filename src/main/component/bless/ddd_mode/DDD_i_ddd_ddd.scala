// #Sireum

// generated by BLESS v3.1.5 at Tue May 09 12:48:37 EDT 2023 from ddd_mode::DDD.i

package bless.ddd_mode

import org.sireum._
import org.sireum.S64._  //type for time
import org.sireum.Z._    //type for integers
import org.sireum.F32._  //type for quantities
import art.Art           // for .time() timestamp
import bless._

object DDD_i_ddd_ddd 
  {
  @enum object CompleteStates 
    {
    "start_state" //initial state
    "pav_state" 
    "sav_state" 
    "va_state" 
    }
  //  execution states: pav_check_vrp_state sav_check_vrp_state check_atrial_refractories_state check_vrp_state sav_check_url_state
  //  final states: off_state

  var currentState: CompleteStates.Type = CompleteStates.start_state

  var tops: Art.Time = s64"0"
  var last_vp_or_vs: Art.Time = s64"0"
  var last_ap_or_as: Art.Time = s64"0"
  var va_interval: Art.Time = s64"1000"-s64"150"
  var timeout_id : Art.PortId = Art.PortId.fromZ(Art.maxPorts+1)
  val timeout_as_Sensed_AV_Delay_ms_Id : Art.PortId = timeout_id+Art.PortId.fromZ(1)
  val timeout_vp_vs_Lower_Rate_Limit_Interval_ms_Id : Art.PortId = timeout_id+Art.PortId.fromZ(2)
  val timeout_vp_vs_va_interval_Id : Art.PortId = timeout_id+Art.PortId.fromZ(3)

  def Initialize_Entrypoint(api: DDD_i_Initialization_Api): Unit = 
    {
    if ( true )
      { do_T0_GO_start(api) }
    }  //end of Initialize_Entrypoint

  def Compute_Entrypoint(api: DDD_i_Operational_Api, Dispatch_Status: Set[art.Art.PortId]): B = 
    {
    api.logDebug("executing Compute_Entrypoint of DDD_i_ddd_ddd")
    var retval : B = F
    currentState match
      {
      case DDD_i_ddd_ddd.CompleteStates.start_state =>
        return T //initial state, do nothing 
      case DDD_i_ddd_ddd.CompleteStates.pav_state =>
        if ( Dispatch_Status.contains(timeout_vp_vs_Lower_Rate_Limit_Interval_ms_Id) )
          { do_T1_PACE_AFTER_LRL_pav(api)
            retval = T }
        if ( Dispatch_Status.contains(api.v_Id) )
          { do_T6_VS_AFTER_AP_pav(api)
            retval = T }
      case DDD_i_ddd_ddd.CompleteStates.sav_state =>
        if ( Dispatch_Status.contains(timeout_vp_vs_Lower_Rate_Limit_Interval_ms_Id) )
          { do_T1_PACE_AFTER_LRL_sav(api)
            retval = T }
        if ( Dispatch_Status.contains(api.v_Id) )
          { do_T2_VS_AFTER_AS_sav(api)
            retval = T }
        if ( Dispatch_Status.contains(timeout_as_Sensed_AV_Delay_ms_Id) )
          { do_T5a_EXPIRED_SENSED_AV_DELAY_sav(api)
            retval = T }
      case DDD_i_ddd_ddd.CompleteStates.va_state =>
        if ( Dispatch_Status.contains(timeout_vp_vs_Lower_Rate_Limit_Interval_ms_Id) )
          { do_T1_PACE_AFTER_LRL_va(api)
            retval = T }
        if ( Dispatch_Status.contains(api.a_Id) )
          { do_T10_AS_AFTER_VS_OR_VP_va(api)
            retval = T }
        if ( Dispatch_Status.contains(api.v_Id) )
          { do_T13_VS_AFTER_VS_OR_VP_va(api)
            retval = T }
        if ( Dispatch_Status.contains(timeout_vp_vs_va_interval_Id) )
          { do_T16_AP_AFTER_TIMEOUT_VS_OR_VP_va(api)
            retval = T }
      }
    DDD_i_ddd_ddd_Bridge.timeout_as_Sensed_AV_Delay_ms_Duration = s64"130"
    DDD_i_ddd_ddd_Bridge.timeout_vp_vs_Lower_Rate_Limit_Interval_ms_Duration = s64"1000"
    DDD_i_ddd_ddd_Bridge.timeout_vp_vs_va_interval_Duration = va_interval
    return retval
    }  //end of Compute_Entrypoint

  def Finalize_Entrypoint(api: DDD_i_Operational_Api): Unit = 
    {
    }  //end of Finalize_Entrypoint

  // methods for transitions leaving initial state  
  def do_T0_GO_start(api: DDD_i_Initialization_Api): Unit = 
    {
    api.logDebug("executing T0_GO")

    api.put_vs()
    last_vp_or_vs = Art.time()
    api.put_as()
    last_ap_or_as = Art.time()
    //set currentState to destination complete state va
    currentState = DDD_i_ddd_ddd.CompleteStates.va_state
    }  //end of do_T0_GO_start

  // methods for transitions leaving complete states  
  def do_T1_PACE_AFTER_LRL_pav(api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing T1_PACE_AFTER_LRL")

    api.put_vp()
    last_vp_or_vs = Art.time()
    //set currentState to destination complete state va
    currentState = DDD_i_ddd_ddd.CompleteStates.va_state
    }  //end of do_T1_PACE_AFTER_LRL_pav

  def do_T6_VS_AFTER_AP_pav(api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing T6_VS_AFTER_AP")

    //no action
    //the destination is execution state pav_check_vrp
    executionState_pav_check_vrp(api)
    }  //end of do_T6_VS_AFTER_AP_pav

  def do_T1_PACE_AFTER_LRL_sav(api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing T1_PACE_AFTER_LRL")

    api.put_vp()
    last_vp_or_vs = Art.time()
    //set currentState to destination complete state va
    currentState = DDD_i_ddd_ddd.CompleteStates.va_state
    }  //end of do_T1_PACE_AFTER_LRL_sav

  def do_T2_VS_AFTER_AS_sav(api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing T2_VS_AFTER_AS")

    //no action
    //the destination is execution state sav_check_vrp
    executionState_sav_check_vrp(api)
    }  //end of do_T2_VS_AFTER_AS_sav

  def do_T5a_EXPIRED_SENSED_AV_DELAY_sav(api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing T5a_EXPIRED_SENSED_AV_DELAY")

    //no action
    //the destination is execution state sav_check_url
    executionState_sav_check_url(api)
    }  //end of do_T5a_EXPIRED_SENSED_AV_DELAY_sav

  def do_T1_PACE_AFTER_LRL_va(api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing T1_PACE_AFTER_LRL")

    api.put_vp()
    last_vp_or_vs = Art.time()
    //set currentState to destination complete state va
    currentState = DDD_i_ddd_ddd.CompleteStates.va_state
    }  //end of do_T1_PACE_AFTER_LRL_va

  def do_T10_AS_AFTER_VS_OR_VP_va(api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing T10_AS_AFTER_VS_OR_VP")

    //no action
    //the destination is execution state check_atrial_refractories
    executionState_check_atrial_refractories(api)
    }  //end of do_T10_AS_AFTER_VS_OR_VP_va

  def do_T13_VS_AFTER_VS_OR_VP_va(api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing T13_VS_AFTER_VS_OR_VP")

    //no action
    //the destination is execution state check_vrp
    executionState_check_vrp(api)
    }  //end of do_T13_VS_AFTER_VS_OR_VP_va

  def do_T16_AP_AFTER_TIMEOUT_VS_OR_VP_va(api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing T16_AP_AFTER_TIMEOUT_VS_OR_VP")

      {
      api.put_ap()
      last_ap_or_as = Art.time()
      }
    //set currentState to destination complete state pav
    currentState = DDD_i_ddd_ddd.CompleteStates.pav_state
    }  //end of do_T16_AP_AFTER_TIMEOUT_VS_OR_VP_va

  // methods for execution states
  def executionState_pav_check_vrp(api: DDD_i_Operational_Api): Unit = 
    {
    if ( (last_vp_or_vs >= (Art.time()-s64"300")) )
      { do_T7_VS_AFTER_AP_IN_VRP_pav_check_vrp(api) }
    else if ( (last_vp_or_vs < (Art.time()-s64"300")) )
      { do_T8_VS_AFTER_AP_AFTER_VRP_pav_check_vrp(api) }
    }  //end of executionState_pav_check_vrp

  def do_T7_VS_AFTER_AP_IN_VRP_pav_check_vrp(api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing do_T7_VS_AFTER_AP_IN_VRP_pav_check_vrp")

    currentState = DDD_i_ddd_ddd.CompleteStates.pav_state  //destination is complete state pav
    }  //end of do_T7_VS_AFTER_AP_IN_VRP_pav_check_vrp

  def do_T8_VS_AFTER_AP_AFTER_VRP_pav_check_vrp(api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing do_T8_VS_AFTER_AP_AFTER_VRP_pav_check_vrp")

      {
      api.put_vs()
      last_vp_or_vs = Art.time()
      }
    currentState = DDD_i_ddd_ddd.CompleteStates.va_state  //destination is complete state va
    }  //end of do_T8_VS_AFTER_AP_AFTER_VRP_pav_check_vrp

  def executionState_sav_check_vrp(api: DDD_i_Operational_Api): Unit = 
    {
    if ( (last_vp_or_vs >= (Art.time()-s64"300")) )
      { do_T3_VS_AFTER_AS_IN_VRP_sav_check_vrp(api) }
    else if ( (last_vp_or_vs < (Art.time()-s64"300")) )
      { do_T4_VS_AFTER_AS_AFTER_VRP_sav_check_vrp(api) }
    }  //end of executionState_sav_check_vrp

  def do_T3_VS_AFTER_AS_IN_VRP_sav_check_vrp(api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing do_T3_VS_AFTER_AS_IN_VRP_sav_check_vrp")

    currentState = DDD_i_ddd_ddd.CompleteStates.sav_state  //destination is complete state sav
    }  //end of do_T3_VS_AFTER_AS_IN_VRP_sav_check_vrp

  def do_T4_VS_AFTER_AS_AFTER_VRP_sav_check_vrp(api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing do_T4_VS_AFTER_AS_AFTER_VRP_sav_check_vrp")

    api.put_vs()
    last_vp_or_vs = Art.time()
    currentState = DDD_i_ddd_ddd.CompleteStates.va_state  //destination is complete state va
    }  //end of do_T4_VS_AFTER_AS_AFTER_VRP_sav_check_vrp

  def executionState_check_atrial_refractories(api: DDD_i_Operational_Api): Unit = 
    {
    if ( (((Art.time()-s64"200") > last_vp_or_vs)) & (((Art.time()-s64"150") > last_ap_or_as)) )
      { do_T11_PVARP_EXPIRED_check_atrial_refractories(api) }
    else if ( (((Art.time()-s64"200") <= last_vp_or_vs)) | (((Art.time()-
    s64"150") <= last_ap_or_as)) )
      { do_T12_STILL_IN_PVARP_check_atrial_refractories(api) }
    }  //end of executionState_check_atrial_refractories

  def do_T11_PVARP_EXPIRED_check_atrial_refractories(api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing do_T11_PVARP_EXPIRED_check_atrial_refractories")

    api.put_as()
    last_ap_or_as = Art.time()
    currentState = DDD_i_ddd_ddd.CompleteStates.sav_state  //destination is complete state sav
    }  //end of do_T11_PVARP_EXPIRED_check_atrial_refractories

  def do_T12_STILL_IN_PVARP_check_atrial_refractories(api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing do_T12_STILL_IN_PVARP_check_atrial_refractories")

    currentState = DDD_i_ddd_ddd.CompleteStates.va_state  //destination is complete state va
    }  //end of do_T12_STILL_IN_PVARP_check_atrial_refractories

  def executionState_check_vrp(api: DDD_i_Operational_Api): Unit = 
    {
    if ( ((Art.time()-s64"300") < last_vp_or_vs) )
      { do_T14_STILL_IN_VRP_check_vrp(api) }
    else if ( ((Art.time()-s64"300") >= last_vp_or_vs) )
      { do_T15_VRP_EXPIRED_check_vrp(api) }
    }  //end of executionState_check_vrp

  def do_T14_STILL_IN_VRP_check_vrp(api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing do_T14_STILL_IN_VRP_check_vrp")

    currentState = DDD_i_ddd_ddd.CompleteStates.va_state  //destination is complete state va
    }  //end of do_T14_STILL_IN_VRP_check_vrp

  def do_T15_VRP_EXPIRED_check_vrp(api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing do_T15_VRP_EXPIRED_check_vrp")

    api.put_vs()
    last_vp_or_vs = Art.time()
    currentState = DDD_i_ddd_ddd.CompleteStates.va_state  //destination is complete state va
    }  //end of do_T15_VRP_EXPIRED_check_vrp

  def executionState_sav_check_url(api: DDD_i_Operational_Api): Unit = 
    {
    if ( (last_vp_or_vs > (Art.time()-s64"400")) )
      { do_T5b_TRACKED_VP_TOO_SOON_AFTER_PREVIOUS_VS_OR_VP_sav_check_url(api) }
    else if ( (last_vp_or_vs <= (Art.time()-s64"400")) )
      { do_T5c_TRACKED_VP_AFTER_AS_sav_check_url(api) }
    }  //end of executionState_sav_check_url

  def do_T5b_TRACKED_VP_TOO_SOON_AFTER_PREVIOUS_VS_OR_VP_sav_check_url(
                                                                        api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing do_T5b_TRACKED_VP_TOO_SOON_AFTER_PREVIOUS_VS_OR_VP_sav_check_url")

    currentState = DDD_i_ddd_ddd.CompleteStates.sav_state  //destination is complete state sav
    }  //end of do_T5b_TRACKED_VP_TOO_SOON_AFTER_PREVIOUS_VS_OR_VP_sav_check_url

  def do_T5c_TRACKED_VP_AFTER_AS_sav_check_url(api: DDD_i_Operational_Api): Unit = 
    {
    api.logDebug("executing do_T5c_TRACKED_VP_AFTER_AS_sav_check_url")

    api.put_vp()
    last_vp_or_vs = Art.time()
    currentState = DDD_i_ddd_ddd.CompleteStates.va_state  //destination is complete state va
    }  //end of do_T5c_TRACKED_VP_AFTER_AS_sav_check_url

  def contains(isz : ISZ[Art.PortId], elt : Art.PortId) : B =
    { for ( i <- isz )
      { if (i == elt) { return T } }
    return F
    }
  }

